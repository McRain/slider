"use strict";(self.webpackChunk_reneos_3d_player_engine=self.webpackChunk_reneos_3d_player_engine||[]).push([[314,740],{314:(e,t,o)=>{o.r(t),o.d(t,{default:()=>n});var s=o(30);class i extends s.default{constructor(e){super(e),this.isBlock=!0,this.type="block"}}const n=i},740:(e,t,o)=>{o.r(t),o.d(t,{default:()=>w});var s=o(308),i=o(314),n=o(404);const{Tween:a,Group:r,Easing:c}=window.TWEEN;let d=0,h=0,l=window.innerWidth/2,p=window.innerHeight/2;const m=new r;class u extends i.default{constructor(e){super(e),this.isCameraRoot=!0,this.camera=new s.PerspectiveCamera(e.fov||60,window.innerWidth/window.innerHeight,e.near||.01,e.far||300),this.camera.name="Main",this.add(this.camera),this.camera.position.set(0,0,1),n.A.Canvas.addEventListener("mousemove",this.onMouseMove.bind(this),!1),this._look=new s.Vector3(0,0,-2),this.activate()}async moveFocus(e,t={}){return new Promise((o=>{const s=this._look.clone(),i=new window.TWEEN.Tween(s).to(e,t.time||700).easing(c.Quadratic.InOut).delay(t.delay||0).onUpdate((()=>{this._look.copy(s)})).onComplete((()=>{m.remove(i),o()}));m.add(i),i.start()}))}moveCam(e,t={}){return new Promise((o=>{const s=this.position.clone(),i=new a(s).to(e,t.time||500).easing(c.Quadratic.InOut).delay(t.delay||0).onUpdate((()=>{this.position.copy(s)})).onComplete((async()=>{m.remove(i),o()}));m.add(i),i.start()}))}async setTo({focus:e,camera:t},o){const i=[];if(e){const{offset:t,position:n,paths:a}=e;let r=new s.Vector3;if(a){let e=o.slide;for(let t=0;t<a.length;t++)e=e.children.find((e=>e.uid===a[t]));e.model.getWorldPosition(r)}else r.set(n.x,n.y,n.z);r.add(t||{x:0,y:0,z:0}),i.push(this.moveFocus(r,e.options))}if(t){const{position:e}=t;i.push(this.moveCam(e,t.options))}await Promise.all(i)}onMouseMove(e){d=.001*(e.clientX-l),h=.001*(e.clientY-p)}update(e){m.update(e),this.camera.position.x+=.01*(d-this.camera.position.x),this.camera.position.y+=.01*(-h-this.camera.position.y),this.camera.lookAt(this._look)}activate(...e){n.A.SetCamera(this.camera),n.A.AddToUpdate(this.update.bind(this))}}const w=u}}]);